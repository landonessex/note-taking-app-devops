trigger:
- main

pool:
  name: 'MySelfHostedPool'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  javaLocalDir: 'C:\Program Files\Java\jdk-17'

stages:
# BUILD STAGE
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build and Test'
    steps:
    - task: JavaToolInstaller@0
      displayName: 'Install Java 17'
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'LocalDirectory'
        jdkFile: '$(Build.SourcesDirectory)/java-tools/jdk-17_windows-x64_bin.zip'
        jdkDestinationDirectory: '$(Agent.ToolsDirectory)/Java17'
      continueOnError: true 

    - task: PowerShell@2
      displayName: 'Setup Java 17 Environment'
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          Write-Host "Setting up Java environment"
          
          # Check if JavaToolInstaller succeeded
          if (Test-Path "$(Agent.ToolsDirectory)/Java17") {
            Write-Host "Using Java from JavaToolInstaller"
            $env:JAVA_HOME = "$(Agent.ToolsDirectory)/Java17"
          }
          # Check if local Java 17 exists
          elseif (Test-Path "$(javaLocalDir)") {
            Write-Host "Using local Java 17 installation"
            $env:JAVA_HOME = "$(javaLocalDir)"
          }
          # Otherwise, try to download Java 17
          else {
            Write-Host "Downloading and installing Java 17"
            # Create a directory for Java
            $javaDir = "$(Build.BinariesDirectory)/Java17"
            New-Item -ItemType Directory -Path $javaDir -Force | Out-Null
            
            # Download Adoptium OpenJDK 17
            $javaUrl = "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8%2B7/OpenJDK17U-jdk_x64_windows_hotspot_17.0.8_7.zip"
            $javaZip = "$(Build.BinariesDirectory)/java17.zip"
            
            Write-Host "Downloading from $javaUrl"
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -Uri $javaUrl -OutFile $javaZip
            
            Write-Host "Extracting Java..."
            Expand-Archive -Path $javaZip -DestinationPath $javaDir -Force
            
            # Find the JDK directory
            $jdkDir = Get-ChildItem -Path $javaDir -Filter "jdk*" -Directory | Select-Object -First 1
            if ($jdkDir) {
              $env:JAVA_HOME = $jdkDir.FullName
            } else {
              $env:JAVA_HOME = $javaDir
            }
          }
          
          # Add Java to PATH
          $env:PATH = "$env:JAVA_HOME\bin;$env:PATH"
          
          # Set environment variables for subsequent tasks
          Write-Host "Setting JAVA_HOME to: $env:JAVA_HOME"
          Write-Host "##vso[task.setvariable variable=JAVA_HOME]$env:JAVA_HOME"
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          
          # Verify Java version
          Write-Host "Java version:"
          java -version 2>&1 | ForEach-Object { Write-Host $_ }
    
    # Step 1: Build .NET Backend
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Backend'
      inputs:
        command: 'build'
        projects: '**/Noteworthy-Backend.csproj'
        arguments: '--configuration $(buildConfiguration)'
    
    # Step 2: Build Frontend
    - task: Npm@1
      displayName: 'Frontend - Install Dependencies'
      inputs:
        command: 'install'
        workingDir: 'Front-Desktop/notes-app'
    
    - task: Npm@1
      displayName: 'Frontend - Build'
      inputs:
        command: 'custom'
        workingDir: 'Front-Desktop/notes-app'
        customCommand: 'run build'

    # SonarCloud with MSBuild mode
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'SonarCloud-Connection'
        organization: 'landonessex'
        scannerMode: 'MSBuild'
        projectKey: 'landonessex_note-taking-app-devops'
        projectName: 'Note Taking App'
        extraProperties: |
          # Specific file inclusions - only source code
          sonar.inclusions=**/*.cs,**/*.js,**/*.jsx,**/*.ts,**/*.tsx
          
          # Comprehensive exclusions to avoid conflicts
          sonar.exclusions=**/node_modules/**,**/*.test.js,**/*.spec.js,**/bin/**,**/obj/**,**/*.json,**/Properties/**,**/wwwroot/**
          
          # Test configuration
          sonar.test.inclusions=**/*.test.js,**/*.spec.js,**/*Test*.cs
          sonar.test.exclusions=**/node_modules/**,**/bin/**,**/obj/**
          
          # Other settings
          sonar.sourceEncoding=UTF-8
          sonar.log.level=DEBUG
    
    # Run SonarCloud
    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Analysis'
      timeoutInMinutes: 15
    
    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate'
      inputs:
        pollingTimeoutSec: '300'

# DELIVERY STAGE
- stage: Deliver
  displayName: 'Delivery Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeliverJob
    displayName: 'Package Artifact'
    steps:
    # Package .NET Backend
    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Backend'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/backend'
        zipAfterPublish: true
    
    # Package Frontend
    - task: CopyFiles@2
      displayName: 'Copy Frontend Files'
      inputs:
        SourceFolder: 'Front-Desktop/notes-app/build'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/frontend'
    
    # Publish Artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# DEPLOY TO DEV STAGE
- stage: DeployToDev
  displayName: 'Deploy to Dev'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev Environment'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Dev Environment"
              echo "Deploying Backend..."
              echo "Deploying Frontend..."
              # This is a mock deployment for demonstration
            displayName: 'Deploy to Dev'

# DEPLOY TO QAT STAGE
- stage: DeployToQAT
  displayName: 'Deploy to QAT'
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
  - deployment: DeployQAT
    displayName: 'Deploy to QAT Environment'
    environment: 'qat'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to QAT Environment"
              # Mock deployment
            displayName: 'Deploy to QAT'

# DEPLOY TO STAGING STAGE
- stage: DeployToStaging
  displayName: 'Deploy to Staging'
  dependsOn: DeployToQAT
  condition: succeeded()
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Staging Environment"
              # Mock deployment
            displayName: 'Deploy to Staging'

# DEPLOY TO PRODUCTION STAGE
- stage: DeployToProduction
  displayName: 'Deploy to Production'
  dependsOn: DeployToStaging
  condition: succeeded()
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production Environment'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Production Environment"
              # Mock deployment
            displayName: 'Deploy to Production'
