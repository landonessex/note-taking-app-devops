trigger:
- main

pool:
  name: 'MySelfHostedPool'

variables:
  solution: 'Noteworthy-Backend.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  JAVA_HOME: 'C:\Program Files\Microsoft\jdk-17.0.14.7-hotspot'
  SONAR_PROJECT_KEY: 'landonessex_note-taking-app-devops'
  SONAR_ORGANIZATION: 'landonessex'
  SONAR_PROJECT_NAME: 'Note Taking App'

stages:
# BUILD STAGE
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build and Test'
    steps:
    # Setup Java environment
    - task: PowerShell@2
      displayName: 'Setup Java 17 Environment'
      inputs:
        targetType: 'inline'
        failOnStderr: false
        errorActionPreference: 'continue'
        script: |
          Write-Host "Setting up Java environment"
          Write-Host "JAVA_HOME: $env:JAVA_HOME"
          
          # Add Java bin to PATH
          $env:PATH = "$env:JAVA_HOME\bin;$env:PATH"
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          
          # Verify Java
          Write-Host "Java version:"
          java -version 2>&1 | ForEach-Object { Write-Host $_ }

    - task: PowerShell@2
      displayName: 'Create SonarCloud Properties File'
      inputs:
        targetType: 'inline'
        script: |
          @"
          # Required metadata
          sonar.projectKey=$(SONAR_PROJECT_KEY)
          sonar.organization=$(SONAR_ORGANIZATION)
          sonar.projectName=$(SONAR_PROJECT_NAME)
          
          # Sources
          sonar.sources=.
          
          # Exclude build artifacts, tests, etc.
          sonar.exclusions=**/node_modules/**,**/bin/**,**/obj/**,**/*.test.js,**/*.spec.js,**/test/**
          
          # Test coverage reports
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/*.xml
          
          # Debug
          sonar.verbose=true
          sonar.log.level=DEBUG
          "@ | Out-File -FilePath "$(Build.SourcesDirectory)/sonar-project.properties" -Encoding UTF8
          
          Get-Content "$(Build.SourcesDirectory)/sonar-project.properties"

    # Build .NET Backend
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Backend'
      inputs:
        command: 'build'
        projects: '**/Noteworthy-Backend.csproj'
        arguments: '--configuration $(buildConfiguration)'
    
    # Build Frontend
    - task: Npm@1
      displayName: 'Frontend - Install Dependencies'
      inputs:
        command: 'install'
        workingDir: 'Front-Desktop/notes-app'
    
    - task: Npm@1
      displayName: 'Frontend - Build'
      inputs:
        command: 'custom'
        workingDir: 'Front-Desktop/notes-app'
        customCommand: 'run build'

    # Now setup and run SonarCloud
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'SonarCloud-Connection'
        organization: '$(SONAR_ORGANIZATION)'
        scannerMode: 'CLI'  
        configMode: 'file' 
        configFile: '$(Build.SourcesDirectory)/sonar-project.properties'
        
    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Analysis'
      timeoutInMinutes: 15
    
    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate'
      inputs:
        pollingTimeoutSec: '300'

# DELIVERY STAGE
- stage: Deliver
  displayName: 'Delivery Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeliverJob
    displayName: 'Package Artifact'
    steps:
    # Package .NET Backend
    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Backend'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/backend'
        zipAfterPublish: true

    # Copy Frontend Source
    - task: CopyFiles@2
      displayName: 'Copy Frontend Source Files'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Front-Desktop/notes-app'
        Contents: |
          src/**
          public/**
          package.json
          package-lock.json
          *.js
          *.json
          README.md
          .env*
        TargetFolder: '$(Build.ArtifactStagingDirectory)/frontend'
    
    # Publish Artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
        
# DEPLOY TO DEV STAGE
- stage: DeployToDev
  displayName: 'Deploy to Dev'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev Environment'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ExtractFiles@1
            displayName: 'Extract Backend Package'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/drop/backend/*.zip'
              destinationFolder: '$(Pipeline.Workspace)/deploy/backend'
          
          - task: CopyFiles@2
            displayName: 'Copy Frontend Files'
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/drop/frontend'
              Contents: '**'
              TargetFolder: '$(Pipeline.Workspace)/deploy/frontend'
          
          - script: |
              echo "Deploying to Dev Environment"
              echo "Starting backend service..."
              cd $(Pipeline.Workspace)/deploy/backend
              dir
              echo "Backend service started"
              
              echo "Setting up frontend..."
              cd $(Pipeline.Workspace)/deploy/frontend
              dir
              echo "Frontend dependencies installed"
              echo "Frontend development server started at http://localhost:3000"
              
              echo "Dev deployment complete!"
            displayName: 'Deploy to Dev'

# DEPLOY TO QAT STAGE
- stage: DeployToQAT
  displayName: 'Deploy to QAT'
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
  - deployment: DeployQAT
    displayName: 'Deploy to QAT Environment'
    environment: 'qat'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to QAT Environment"
              echo "Copying artifacts from Dev..."
              echo "Configuring for QAT settings..."
              echo "Starting services..."
              echo "Running integration tests..."
              echo "QAT deployment complete!"
            displayName: 'Deploy to QAT'

# DEPLOY TO STAGING STAGE
- stage: DeployToStaging
  displayName: 'Deploy to Staging'
  dependsOn: DeployToQAT
  condition: succeeded()
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Staging Environment"
              echo "Copying artifacts from QAT..."
              echo "Configuring for Staging settings..."
              echo "Starting services with production configuration..."
              echo "Running smoke tests..."
              echo "Staging deployment complete!"
            displayName: 'Deploy to Staging'

# DEPLOY TO PRODUCTION STAGE
- stage: DeployToProduction
  displayName: 'Deploy to Production'
  dependsOn: DeployToStaging
  condition: succeeded()
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production Environment'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Production Environment"
              echo "Performing final verification..."
              echo "Applying production configuration..."
              echo "Starting production services..."
              echo "Monitoring deployment..."
              echo "Production deployment complete!"
            displayName: 'Deploy to Production'
