trigger:
- main

pool:
  name: 'MySelfHostedPool'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  JAVA_HOME: 'C:\Program Files\Eclipse Adoptium\jdk-11.0.26+4'

stages:
# BUILD STAGE
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build and Test'
    steps:
    - task: PowerShell@2
      displayName: 'Configure Java Environment'
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          Write-Host "Setting up Java environment"
          Write-Host "Initial JAVA_HOME: $env:JAVA_HOME"
          
          # Double-check if Java is in the expected location
          $javaExe = "$env:JAVA_HOME\bin\java.exe"
          if (Test-Path $javaExe) {
            Write-Host "Java executable found at: $javaExe"
          } else {
            Write-Host "##[warning]Java not found at $javaExe, searching for Java..."
            
            # Try to find Java in common locations
            $javaPaths = @(
              "C:\Program Files\Eclipse Adoptium\jdk-11.0.26+4",
              "C:\Program Files\Eclipse Adoptium\jdk-11.0.26.4-hotspot", # Check the path from the previous error
              "C:\Program Files\Java",
              "C:\Program Files\Eclipse Adoptium",
              "C:\Program Files\AdoptOpenJDK"
            )
            
            foreach ($basePath in $javaPaths) {
              if (Test-Path $basePath) {
                $jdkFolders = Get-ChildItem -Path $basePath -Directory | Where-Object { $_.Name -like "*jdk*" }
                foreach ($folder in $jdkFolders) {
                  $testJavaExe = Join-Path -Path $folder.FullName -ChildPath "bin\java.exe"
                  if (Test-Path $testJavaExe) {
                    Write-Host "Found Java at: $($folder.FullName)"
                    Write-Host "##vso[task.setvariable variable=JAVA_HOME]$($folder.FullName)"
                    $env:JAVA_HOME = $folder.FullName
                    break
                  }
                }
              }
              if ($env:JAVA_HOME -ne "C:\Program Files\Eclipse Adoptium\jdk-11.0.26+4") { break }
            }
          }
          
          # Add Java to PATH and export for subsequent tasks
          $env:PATH = "$env:PATH;$env:JAVA_HOME\bin"
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          
          # Extra verification - capture stderr without failing
          Write-Host "Final JAVA_HOME: $env:JAVA_HOME"
          # Redirect stderr (2) to stdout (1) and capture
          $javaVersion = & "$env:JAVA_HOME\bin\java.exe" -version 2>&1
          Write-Host "Java version output:"
          $javaVersion | ForEach-Object { Write-Host $_ }

    - task: PowerShell@2
      displayName: 'SonarCloud Pre-Diagnostics'
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          Write-Host "===== ENVIRONMENT DIAGNOSTICS ====="
          Write-Host "JAVA_HOME: $env:JAVA_HOME"
          Write-Host "PATH: $env:PATH"
          
          # Verify Java executable
          $javaExe = "$env:JAVA_HOME\bin\java.exe"
          if (Test-Path $javaExe) {
            Write-Host "Java executable found at: $javaExe"
            $javaVersion = & "$javaExe" -version 2>&1
            Write-Host "Java version: $javaVersion"
          } else {
            Write-Host "##[error]Java executable NOT found at expected location: $javaExe"
          }
          
          # Verify SonarScanner directory
          $sonarDir = "C:\Agent\_work\_tasks\SonarCloudPrepare_*"
          if (Test-Path $sonarDir) {
            $sonarDirs = Get-ChildItem -Path $sonarDir -Directory
            foreach ($dir in $sonarDirs) {
              Write-Host "Found SonarCloud prepare directory: $($dir.FullName)"
              
              # Check scanner files
              $scannerDirs = Get-ChildItem -Path $dir.FullName -Directory -Recurse -Include "sonar-scanner*", "*sonar*scanner*"
              foreach ($scannerDir in $scannerDirs) {
                Write-Host "Found scanner directory: $($scannerDir.FullName)"
                if (Test-Path "$($scannerDir.FullName)\bin") {
                  Write-Host "Scanner bin directory exists"
                }
              }
            }
          } else {
            Write-Host "##[warning]Could not find SonarCloud prepare directory"
          }
          
          # Network connectivity checks
          Write-Host "Testing network connectivity to SonarCloud:"
          try { $result = Test-NetConnection -ComputerName sonarcloud.io -Port 443; Write-Host "Connected: $($result.TcpTestSucceeded)" } catch { Write-Host "Connection test failed: $_" }
          
          Write-Host "Testing network connectivity to SonarSource binaries:"
          try { $result = Test-NetConnection -ComputerName binaries.sonarsource.com -Port 443; Write-Host "Connected: $($result.TcpTestSucceeded)" } catch { Write-Host "Connection test failed: $_" }
    
    # Use the latest version of SonarCloud tasks (@3)
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'SonarCloud-Connection'
        organization: 'landonessex'
        scannerMode: 'dotnet'
        projectKey: 'landonessex_note-taking-app-devops'
        projectName: 'Note Taking App'
        extraProperties: |
          sonar.sources=Front-Desktop/notes-app/src,Noteworthy-Backend
          sonar.exclusions=**/node_modules/**,**/*.test.js
          sonar.sourceEncoding=UTF-8
          # Add these properties to help with Java detection
          sonar.scanner.force-deprecated-java-version=false
          sonar.log.level=DEBUG
    
    # Step 1: Build .NET Backend - COMPILE
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Backend'
      inputs:
        command: 'build'
        projects: '**/Noteworthy-Backend.csproj'
        arguments: '--configuration $(buildConfiguration)'
    
    # Step 2: Build Frontend - COMPILE
    - task: Npm@1
      displayName: 'Frontend - Install Dependencies'
      inputs:
        command: 'install'
        workingDir: 'Front-Desktop/notes-app'
    
    - task: Npm@1
      displayName: 'Frontend - Build'
      inputs:
        command: 'custom'
        workingDir: 'Front-Desktop/notes-app'
        customCommand: 'run build'
    
    # Use the latest version of SonarCloud tasks (@3)
    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Analysis'
      timeoutInMinutes: 15
    
    # Use the latest version of SonarCloud tasks (@3)
    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate'
      inputs:
        pollingTimeoutSec: '300'

# DELIVERY STAGE
- stage: Deliver
  displayName: 'Delivery Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeliverJob
    displayName: 'Package Artifact'
    steps:
    # Package .NET Backend
    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Backend'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/backend'
        zipAfterPublish: true
    
    # Package Frontend
    - task: CopyFiles@2
      displayName: 'Copy Frontend Files'
      inputs:
        SourceFolder: 'Front-Desktop/notes-app/build'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/frontend'
    
    # Publish Artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# DEPLOY TO DEV STAGE
- stage: DeployToDev
  displayName: 'Deploy to Dev'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev Environment'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Dev Environment"
              echo "Deploying Backend..."
              echo "Deploying Frontend..."
              # This is a mock deployment for demonstration
            displayName: 'Deploy to Dev'

# DEPLOY TO QAT STAGE
- stage: DeployToQAT
  displayName: 'Deploy to QAT'
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
  - deployment: DeployQAT
    displayName: 'Deploy to QAT Environment'
    environment: 'qat'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to QAT Environment"
              # Mock deployment
            displayName: 'Deploy to QAT'

# DEPLOY TO STAGING STAGE
- stage: DeployToStaging
  displayName: 'Deploy to Staging'
  dependsOn: DeployToQAT
  condition: succeeded()
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Staging Environment"
              # Mock deployment
            displayName: 'Deploy to Staging'

# DEPLOY TO PRODUCTION STAGE
- stage: DeployToProduction
  displayName: 'Deploy to Production'
  dependsOn: DeployToStaging
  condition: succeeded()
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production Environment'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying to Production Environment"
              # Mock deployment
            displayName: 'Deploy to Production'
